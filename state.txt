ONE concept
	1,使用场景是复杂的交互状况下,很简单的逻辑,不需要redux
	2,Store   数据存储 一个应用仅有一个   redux package提供 createStore来返回新Store对象 const store = createStore(ruducer(),'最高级的默认初始值')
	3,State   是某个时刻数据   Store中是所有的数据  要得到某时候的   store(返回的store对象)  store.getState()
	4,Action    是view变化发出的通知  一个对象  必须有的属性是 type,表示名字,其他还有payload[携带的信息] error meta
	5,store.dispatch({actionObj})  是发出action的唯一方法--->出发reducer方法的执行
		看见了嘛 store是一个牛逼的操作方法,都用store来
	6,reducer 是接受action和state来改变state的一个函数
	7,store.subscribe(),这个函数自动监听state,只要变化了就自动执行其中的函数 var unsubscribe = store.subscribe() 返回一个函数,执行取消监听
	8,store对象有三个对象方法.store.dispatch() store.subscribe() store.getState()
	9,所以最終得redux的运行步骤的自我理解:
		(0)开始就加载redux将store制造出来,用reducer将动作和state链接起来
		(1)用户骚乱页面,引起页面的动作
		(2)动作触发事件执行store,store到了reducer函数,根据事件分类改变state之后并且返回state
		(3)state变化了就触发subscribe函数,然后触发视图跟新
	10,编辑的步骤是:(1),先搞定视图层,(2)然后事件分发到store进行处理,(3)之后,到reducer处理state	
时隔几天之后,老子又来了,狗屁的react-redux,再来会会你
	one:直接看不到state,不准在组件地方操作state,,,container把state转化成了props,
	two:示例的目录结构的分析:
		1,component是样式视图摆放处;2,containers是state,dispatch和props合view的融合重新组合出
		3,reducers就是reduce的摆放处,4,action就是action

	最终,我的react-redux走上了一条最简单的道路,若是在加上react-redux,我真的感到无比疑惑,但是现在,我能够搞定的是react-router和redux简单版本
	接下来,我将用于投票系统来进行运用我的react的实践

REACT-ROUTER==>>{讲真突然发现这确实是个牛逼的东西}
	1,是一种url和component的影射的关系,让url和不同的组件对应起来
	2,npm install react-router
	3,import { Router,Route,hashHistory} from 'react-router'
	4,昨天头昏的时候看的router,简直学得垃圾的像一坨屎,今天感觉问题都迎刃而解
	5,路由的嵌套
		//history是规定的是url的方式
		<Router history={hashHistory}>
			<Route path='/father' compnent={father}>
				<Route path='/son' compnent={son}></Route>
			</Route>
		</Router>
		father容器里面有{this.props.children},这个时候,若是url输入/fahter,那么就会显示father的内容<father></father>
		若是输入的是/son,那么,就会是限价在father的在加载son的,就是两个部分的内容都有<father><son></son></father>,[固定的header footer 导航栏可以这么搞],两个要点:(1)index的Route的的嵌套,(2),component中father合适部分的{this.props.children}
	       **这种勇于共同部分的渲染有效果,访问时候都是根路径

	6,path
		<Router history={hashHistory}>
			<Route path='father' compnent={father}>
				<Route path='son' compnent={son}></Route>
			</Route>
		</Router>
		此时访问.../father是fathercomponent 访问/son none  访问father/son是<father><son></son></father>
		**这个东西很好,可以严格的控制url样子,还有很多的匹配的样式
		**触发了第一个路由就不会继续往下触发
		得到/father/home/:name的name参数杜儿方法是:this.props.params.name,在home容器里面得
	7,IndexRoute
	8,hook,当离开一个route或者进入一个route的时候,有onEnter={()=>{}} 和onLeave={()=>{}}两个函数来就行进入时候的执行和离开时候的执行



MORE get
	1,yargs,一个东西,我在执行webpack的时候,想要传入参数,来判断在哪个路径里面执行,于是乎,我需要在命令行传入参数比如 我在命令行里面输入:
		webpack --type=count  [我传入的是type参数] 然后,webpak.config.js里面写 var argument = require('yargs').argv
		然后得到传入的值就可以直接 argument.type //count  不过事先要 npm install yargs
	2,react的ProtoType,是比较有用的,用来定组件的类型,定组件的defaultProp的类型的,比如是否必须,什么类型
	3,我webpack时候时常Error: Cannot find module 'core-js/library/fn/get-iterator',原因是要我删除node_modules然后重新npm install才行,曰是window上的问题
	4,关于package.json里面的scripts  若是命令是start test直接npm start就有用,对于其他比如fuck,count,如:
		"scripts": {
		    "count":"webpack-dev-server --port 9999 --color --content-base ./count"
		    }
		    那么要npm run count才有用
	5,import React {component} from 'react' 同时导入匿名方法和其他变量 
		全部导入  import * as Modle from 'modle'  Modle.you  Modle.me 
	6,定义react的组件竟然也可以用const Link = (params)=>{return ()}来定义,params竟然就是其defaultProps
	7,引入组建的时候,如果名字是index.js直接写文件夹不用在写index会自动识别 真水深
	8,protoTypes是组件的类或者function的属性,React里面的属性是ProtoTypes
	9,拓展运算符把数组或者字符串打散为逗号相隔的参数
		//而且rest的...state仅仅能够放在最后一个参数的位置
			function you(a,b,...state){
			  console.log(a)//3
			  console.log(b)//4
			  console.log(state)//输入各个,没什么意义
			  console.log(...state)//[4,5,6,7,'ddd']
			  var p = [...state,'d','e']//[4,5,6,7,'ddd','d','e']
			  return p
			}
			var fuck = you(3,4,4,5,6,7,'ddd')
			不可用于{...state,'hello':'hellllll'}的情况更不可以  var p = ...state 或者返回 return ...state都会报错
	10,一小个组件都要写一个文件的啊
	11,react的{}使用实在凡是要用到js代码的时候都行不像是angular在标签中不需要使用一样
12,马屁我是真的醉了这个狗日的react-redux,妈批的,老子感觉懵逼死了----不急不急,慢慢来,先撂你一段时间
	12,对象的结构和函数参数的结构还一样let {hello='hello',you="you"} = {hello:'hhhh',you:'you'}  var {modle:me}= {modle:'fairy'}
		这时候,me='fairy'
		函数 function haha({hello='you',you='you'})   haha({you:'you',hello:'helo'})
	13,react和react-dom 
		react:component,propTypes,children,	createClass  ...  核心的创建组件,和其特性
		react-dom:render mountedORnot  主要是dom的操作
	14,const ComponentName = ({这里摆放的就是propsName})=>{
		//直接不需要state这种写法...
	}
	15,我的git的分支又遇到问题了 fuck  为什么次分支创建的文件commit的主分支也会有但是不全,以前不是这样的啊
	16,最终有关联的组件,最终是合并在一起的,比如值的关联等等,最终虽说是子组件,但是最终只有合并在一起才能够用
	17,react中用class定义组件,用到this指向react的话,那么要用super





	





	fairy protection
	有时候,你需要的并不是那么难,只是没人懂你,或者说,没人用心去了解你,我愿意去窥测天机

	小公主生病了。国王指望女儿病好，对她说：“你要什么我都可以给你。 
你要什么呢？”“我要天上的月亮。” 
小公主说，“有了月亮，我的病马上就好了。” 
国王身边有很多聪明人，国王要什么， 
他们就能给他弄到什么。国王答应小公主，一定会给她弄到月亮。 
国王先命令宫廷侍卫长去弄月亮。 
宫廷侍卫长又大又胖，总是戴一副厚厚的眼镜。“要月亮？” 
侍卫长惊叫道，眼睛都瞪圆了，“月亮离地球有三万五千英里， 
它比小公主的房间大多了，而且是铜铸的。陛下，我实在没法给你弄来。” 

国王气坏了，叫来了魔法师。魔法师又瘦又小，总是头戴红色尖顶帽， 
身披蓝色长斗篷。他一听国王吩咐要把月亮弄来给小公主， 
脸顿时变得煞白煞白，像粉笔一样白。“我什么魔术没给您变过啊，陛下。 
可是月亮我没法变出来， 
它离地球有十五万英里，而且它是用绿色大理石做的，比王宫还大一倍呢。” 

国王气坏了，又喊来了宫廷数学家。数学家身穿黑色长袍，头顶光秃秃的， 
近视眼，耳朵上还夹着一支铅笔。 
“月亮离地球有三十万英里。它又圆又平，像个硬币， 
是用石棉做的，有您半个王国那么大，而它粘在天上，根本拿不下来。” 
国王气坏了，最后叫来的是一个宫廷小丑。他身穿一身小丑衣服， 
戴一顶有个小铃铛的尖顶帽。“有什么能为您效劳的，陛下？” 
他问道。“谁也不肯帮我的忙。小公主要月亮，得不到月亮她的病就不会好。 
我命令一个人，两个人，三个人，可是他们说得月亮一次比一次大， 
一次比一次远，我知道你也帮不了我的忙，你就给我弹一支悲伤的曲子吧。” 
小丑弹着琵琶说：“他们每个人说得月亮大小和离地球的距离都不一样， 
陛下有没有问过小公主， 
月亮有多大，离地球有多远呢？”“这我倒没想过。”“那我去问问她吧。” 

小丑悄悄来到小公主的卧房，小公主脸色十分苍白，不过看到小丑很高兴。 
“你把月亮给我拿来了，是吗？”“还没有，小公主。 
不过很快就有了。你想它有多大呢？”“比我大拇指的指甲大那么一点儿， 
因为我把大拇指举在眼前看月亮，月亮被遮住了。”公主回答。 
“那么它离开地面很高吗？”小丑又问。“就比窗外那棵高高的树矮那么一点儿， 
它老是挂在树梢上。”小丑想了想，又问道： 
“那月亮是什么东西做的呢？”“傻瓜，当然是金子做的。”小公主笑着叫起来。 

小丑从小公主卧房一直来到珠宝匠那里，他让珠宝匠用金子做了个圆盘一样的小月亮， 
比小公主的大拇指的指甲大那么一点儿， 
又请珠宝匠做了一条金链，这样，小公主可以把月亮挂在脖子上。 
小公主拿着小丑给她的月亮，高兴极了，病一下就好了。 
可是，国王仍然很担心：“一到晚上，月亮升起来了，小公主就会知道月亮还在天上， 
挂在她脖子上的并不是真的月亮。”宫廷小丑来了， 
他对国王说：“月亮是藏不起来的。关于月亮，公主知道得比别人多，还是让我去问问她吧。” 

晚上，月亮升起来。小丑轻轻地来到小公主的房间。 
小公主正静静地望着窗外天上的月亮。小丑看她好像不是很高兴。 
“你能告诉我吗，小公主？”小丑难过地问道，“月亮在你的脖子上， 
怎么又会在天上呢？”小公主看到他，高兴地笑起来：“傻瓜，那还不简单， 
我一颗牙掉了，不是又会有一颗新的长出来吗？”“一点不错。” 
小丑说，“树上的叶子掉了，还会长出新的叶子。 
我怎么没想到呢！”“月亮也是这样的。你把月亮送给了我，于是天上又长出了新的月亮。” 
小丑笑笑，走到窗口，只觉得月亮对他眨了眨眼，他也对月亮眨了眨眼。 

公主骑驴过河

唱歌给树木的小鸟
